<?xml?>


<gwbuild requiredVersion="5.7.2.1">

  <project name="libchipcard" version="5.99.0-git"
           so_current="8" so_age="0" so_revision="0"
           write_config_h="TRUE"
           >

    <!-- version vars (for SED)-->
    <setVar name="CHIPCARD_VERSION_MAJOR">$(project_vmajor)</setVar>
    <setVar name="CHIPCARD_VERSION_MINOR">$(project_vminor)</setVar>
    <setVar name="CHIPCARD_VERSION_PATCHLEVEL">$(project_vpatchlevel)</setVar>
    <setVar name="CHIPCARD_VERSION_BUILD">$(project_vbuild)</setVar>
    <setVar name="CHIPCARD_VERSION_TAG">$(project_vtag)</setVar>
    <setVar name="CHIPCARD_SO_CURRENT">$(project_so_current)</setVar>
    <setVar name="CHIPCARD_SO_REVISION">$(project_so_revision)</setVar>
    <setVar name="CHIPCARD_SO_AGE">$(project_so_age)</setVar>
    <setVar name="CHIPCARD_SO_EFFECTIVE">$(project_so_effective)</setVar>
    <setVar name="CHIPCARD_VERSION_STRING">
      $(project_vmajor).$(project_vminor).$(project_vpatchlevel)
    </setVar>
    <setVar name="CHIPCARD_VERSION_FULL_STRING">
      $(project_vmajor).$(project_vminor).$(project_vpatchlevel).$(project_vbuild)$(project_vtag)
    </setVar>


    <!-- version defines -->
    <define name="CHIPCARD_VERSION_TAG"        value="$(project_vtag)" quoted="TRUE" />
    <define name="CHIPCARD_VERSION_MAJOR"      value="$(project_vmajor)" />
    <define name="CHIPCARD_VERSION_MINOR"      value="$(project_vminor)" />
    <define name="CHIPCARD_VERSION_PATCHLEVEL" value="$(project_vpatchlevel)" />
    <define name="CHIPCARD_VERSION_BUILD"      value="$(project_vbuild)" />
    <define name="CHIPCARD_VERSION_FULL_STRING" quoted="TRUE" 
            value="$(project_vmajor).$(project_vminor).$(project_vpatchlevel).$(project_vbuild)-$(project_vtag)" />
    <define name="CHIPCARD_VERSION_STRING"      quoted="TRUE" 
            value="$(project_vmajor).$(project_vminor).$(project_vpatchlevel).$(project_vbuild)" />

    <define name="CHIPCARD_SO_CURRENT"         value="$(project_so_current)" />
    <define name="CHIPCARD_SO_REVISION"        value="$(project_so_revision)" />
    <define name="CHIPCARD_SO_AGE"             value="$(project_so_age)" />
    <define name="CHIPCARD_SO_EFFECTIVE"       value="$(project_so_effective)" />


    <!-- prefix handling -->
    <option id="prefix" type="string">
      <default>/usr/local</default>
    </option>
    <setVar name="prefix">$(option_prefix)</setVar>
    <setVar name="exec_prefix">$(option_prefix)/bin</setVar>
    <setVar name="sysconfdir">$(option_prefix)/etc</setVar>
    <setVar name="bindir">$(option_prefix)/bin</setVar>
    <setVar name="libdir">$(option_prefix)/lib</setVar>
    <setVar name="includedir">$(option_prefix)/include</setVar>
    <setVar name="datarootdir">$(option_prefix)/share</setVar>
    <setVar name="datadir">$(option_prefix)/share</setVar>
    <setVar name="localedir">$(option_prefix)/share/locale</setVar>

    <setVar name="pkglibdir">$(libdir)/$(package)</setVar>
    <setVar name="pkgincludedir">$(includedir)/$(package)</setVar>
    <setVar name="pkgdatadir">$(datadir)/$(package)</setVar>



    <!-- enable test code -->
    <option id="enable_testcode" type="string">
      <default>TRUE</default>
      <choices>TRUE FALSE</choices>
    </option>
    <ifVarMatches name="option_enable_testcode" value="TRUE" >
      <define name="CHIPCARD_ENABLE_TESTCODE" value="1" />
    </ifVarMatches>

    <!-- local installation -->
    <option id="local_install" type="string">
      <default>FALSE</default>
      <choices>TRUE FALSE</choices>
    </option>
    <ifVarMatches name="option_local_install" value="TRUE" >
      <define name="ENABLE_LOCAL_INSTALL" value="1" />
    </ifVarMatches>

    <!-- full api doc -->
    <option id="full_doc" type="string">
      <default>TRUE</default>
      <choices>TRUE FALSE</choices>
    </option>
    <ifVarMatches name="option_full_doc" value="TRUE" >
      <then>
        <setVar name="DOXYGEN_INPUT">src $(topsrcdir)/doc/apidoc.h $(topsrcdir)/src $(topsrcdir)/tutorials</setVar>
        <setVar name="DOXYGEN_FILE_PATTERNS">*.h *.hpp *.c *.cpp</setVar>
        <setVar name="DOXYGEN_EXCLUDE_PATTERNS">*moc*</setVar>
      </then>
      <else>
        <setVar name="DOXYGEN_INPUT">src $(topsrcdir)/doc/apidoc.h $(topsrcdir)/src $(topsrcdir)/tutorials</setVar>
        <setVar name="DOXYGEN_FILE_PATTERNS">*.h *.hpp</setVar>
        <setVar name="DOXYGEN_EXCLUDE_PATTERNS">*moc* *_p.h</setVar>
      </else>
    </ifVarMatches>
    <setVar name="DOXYGEN_EXCLUDE">$(topsrcdir)/src/os/windows</setVar>
    <setVar name="DOXYGEN_EXAMPLE_PATH">$(topsrcdir)/tutorials</setVar>



    <!-- paths -->
    <ifVarMatches name="GWBUILD_SYSTEM" value="windows" > <!-- long version of IF statement with THEN and ELSE -->
      <then>
        <define       name="OS_WIN32" value="1" />
        <setVar       name="lc_sys_is_windows">1</setVar>
        <setVar       name="lc_client_xml_dir">share/chipcard</setVar>
        <setVar       name="lc_locale_searchdir">share/locale</setVar>
        <setVar       name="lc_os_driver_dir">win32</setVar>
        <setVar       name="libchipcardc_libs">-L $(libdir) -lchipcard</setVar>
      </then>
      <else>
        <define       name="OS_POSIX" value="1" />
        <setVar       name="lc_sys_is_windows">0</setVar>
        <setVar       name="lc_os_driver_dir">posix</setVar>
        <setVar       name="libchipcardc_libs">-L $(libdir) -lchipcard</setVar>
        <ifVarMatches name="option_local_install"     value="TRUE" >
          <then>
            <setVar   name="lc_client_xml_dir">share/chipcard</setVar>
            <setVar   name="lc_locale_searchdir">share/locale</setVar>
          </then>
          <else>
            <setVar   name="lc_client_xml_dir">$(datadir)/chipcard</setVar>
            <setVar   name="lc_locale_searchdir">$(datadir)/locale</setVar>
          </else>
        </ifVarMatches>
      </else>
    </ifVarMatches>
  
  
    <!-- dependencies ( pkg-config and libs) -->
    <dependencies>
      <dep id="gwenhywfar" name="gwenhywfar" minversion="1.0" required="TRUE" >
        <variables>plugindir</variables>
      </dep>

      <dep id="zlib" name="zlib" required="TRUE" />

      <ifNotVarMatches name="GWBUILD_SYSTEM" value="windows" >
        <dep id="pcsc" name="libpcsclite" required="TRUE" />
      </ifNotVarMatches>

    </dependencies>


    <setVar name="have_pcsc">yes</setVar>
    <ifVarMatches name="GWBUILD_SYSTEM" value="windows" >
      <setVar name="pcsc_libs">-lwinscard</setVar>
    </ifVarMatches>
      

    <!-- symbol visibility -->
    <checkCompiler>
      <arg name="has_symbol_visibility">-fvisibility=hidden</arg>
    </checkCompiler>
    
    <ifVarMatches name="has_symbol_visibility" value="TRUE" >
      <setVar name="visibility_cflags">-fvisibility=hidden</setVar>
      <define name="GCC_WITH_VISIBILITY_ATTRIBUTE" />
    </ifVarMatches>



    <checkheaders>
      locale.h libintl.h iconv.h
      fcntl.h stdlib.h string.h unistd.h
      assert.h ctype.h errno.h fcntl.h stdio.h stdlib.h string.h strings.h locale.h
      netinet/in.h
    </checkheaders>
  
  
    <checkfunctions type="c" >
      setlocale
      memmove 
      memset 
      strcasecmp 
      strdup 
      strerror 
      snprintf
    </checkfunctions>



    <checkProgs>
      <prog cmd="xmlmerge" id="xmlmerge" />
      <prog cmd="xgettext" id="xgettext" />
      <prog cmd="astyle"   id="astyle" />
    </checkProgs>



    <!-- compatibility defines/vars with Makefile.am -->
    <setVar name="chipcard_ldflags">-L$${libdir}</setVar>
    <setVar name="chipcard_libs">-lchipcard</setVar>
    <setVar name="libchipcard_includes">-I$${includedir}/libchipcard6</setVar>
    <setVar name="gwenhywfar_includes">$(gwenhywfar_cflags)</setVar>
    <setVar name="OSYSTEM">$(GWBUILD_SYSTEM)</setVar>

    <define name="LOCALEDIR"              value="$(datadir)/locale"                           quoted="TRUE" />

    <define name="OS_TYPE"      value="$(GWBUILD_SYSTEM)"    quoted="TRUE" />
    <define name="OS_SHORTNAME" value="$(GWBUILD_SYSTEM)"    quoted="TRUE" />




    <data dist="TRUE" install="$(libdir)/pkgconfig" generated="true">
      libchipcard-client.pc
    </data>
  
  
    <subdirs>
      src
      data
    </subdirs>


    <!-- Build with "gwbuild -B gettext-src" -->
    <ifVarMatches name="xgettext_EXISTS" value="TRUE" >
      <buildFiles name="gettext-src" auto="FALSE" >
        <input>
          <files match="*.c" />
          <files match="*.cpp" />
        </input>
  
        <output>
          libchipcard.pot
        </output>
        
        <cmd tool="$(xgettext)" checkDates="TRUE" deleteOutFileFirst="TRUE" >
          -C -c -ki18n -ktr2i18n -kI18N -kI18S -kI18N_NOOP -ktranslate -kaliasLocale -ktr -ktrUtf8
          --msgid-bugs-address=aqbanking-user@lists.aqbanking.de
          -o $(OUTPUT[0]) $(INPUT[])
        </cmd>
  
        <buildMessage>
          Extracting I18N strings into $(OUTPUT[0])
        </buildMessage>
      </buildFiles>
    </ifVarMatches>


    <!-- Build with "gwbuild -B format-src" -->
    <ifVarMatches name="astyle_EXISTS" value="TRUE" >
      <buildFiles name="format-src" auto="FALSE" >
        <input>
          <files match="*.c" />
          <files match="*.cpp" />
          <files match="*.h" />
        </input>
  
        <output>
        </output>
        
        <cmd tool="$(astyle)" checkDates="FALSE"  >
          --style=stroustrup
          -s2
          --min-conditional-indent=0
          --indent-labels
          --max-continuation-indent=80
          --pad-comma
          --pad-header
          --unpad-paren
          --align-pointer=name
          --break-closing-braces
          --break-one-line-headers
          --attach-return-type
          --convert-tabs
          --max-code-length=120
          --break-after-logical
          --preserve-date
          --suffix=none
             $(INPUT[])
        </cmd>
  
        <buildMessage>
          Formatting source files in-place.
        </buildMessage>
      </buildFiles>
    </ifVarMatches>



    <writeFile name="libchipcard-client.pc" />
    <writeFile name="Doxyfile" />


  </project>
  
</gwbuild>

