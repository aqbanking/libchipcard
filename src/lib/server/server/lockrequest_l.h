/* This file is auto-generated from "lockrequest.xml" by the typemaker
   tool of Gwenhywfar. 
   Do not edit this file -- all changes will be lost! */
#ifndef LOCKREQUEST_L_H
#define LOCKREQUEST_L_H

/** @page P_LCS_LOCKREQUEST_LIB LCS_LockRequest (lib)
This page describes the properties of LCS_LOCKREQUEST
*/
#ifdef __cplusplus
extern "C" {
#endif

typedef struct LCS_LOCKREQUEST LCS_LOCKREQUEST;

#ifdef __cplusplus
} /* __cplusplus */
#endif

#include <gwenhywfar/misc.h>
#include <gwenhywfar/misc.h>
#include <gwenhywfar/db.h>
#include <gwenhywfar/types.h>
#include <gwenhywfar/gwentime.h>

#ifdef __cplusplus
extern "C" {
#endif


GWEN_LIST_FUNCTION_DEFS(LCS_LOCKREQUEST, LCS_LockRequest)
LCS_LOCKREQUEST_LIST *LCS_LockRequest_List_dup(const LCS_LOCKREQUEST_LIST *stl);

LCS_LOCKREQUEST *LCS_LockRequest_new();
LCS_LOCKREQUEST *LCS_LockRequest_fromDb(GWEN_DB_NODE *db);
LCS_LOCKREQUEST *LCS_LockRequest_dup(const LCS_LOCKREQUEST*st);
void LCS_LockRequest_free(LCS_LOCKREQUEST *st);
void LCS_LockRequest_Attach(LCS_LOCKREQUEST *st);
int LCS_LockRequest_ReadDb(LCS_LOCKREQUEST *st, GWEN_DB_NODE *db);
int LCS_LockRequest_toDb(const LCS_LOCKREQUEST*st, GWEN_DB_NODE *db);
int LCS_LockRequest_IsModified(const LCS_LOCKREQUEST *st);
void LCS_LockRequest_SetModified(LCS_LOCKREQUEST *st, int i);

/**
* Returns the property @ref LCS_LOCKREQUEST_RequestId
*/
uint32_t LCS_LockRequest_GetRequestId(const LCS_LOCKREQUEST *el);
/**
* Set the property @ref LCS_LOCKREQUEST_RequestId
*/
void LCS_LockRequest_SetRequestId(LCS_LOCKREQUEST *el, uint32_t d);

/**
* Returns the property @ref LCS_LOCKREQUEST_ClientId
*/
uint32_t LCS_LockRequest_GetClientId(const LCS_LOCKREQUEST *el);
/**
* Set the property @ref LCS_LOCKREQUEST_ClientId
*/
void LCS_LockRequest_SetClientId(LCS_LOCKREQUEST *el, uint32_t d);

/**
* Returns the property @ref LCS_LOCKREQUEST_LockTime
*/
const GWEN_TIME *LCS_LockRequest_GetLockTime(const LCS_LOCKREQUEST *el);
/**
* Set the property @ref LCS_LOCKREQUEST_LockTime
*/
void LCS_LockRequest_SetLockTime(LCS_LOCKREQUEST *el, const GWEN_TIME *d);

/**
* Returns the property @ref LCS_LOCKREQUEST_Duration
*/
int LCS_LockRequest_GetDuration(const LCS_LOCKREQUEST *el);
/**
* Set the property @ref LCS_LOCKREQUEST_Duration
*/
void LCS_LockRequest_SetDuration(LCS_LOCKREQUEST *el, int d);

/**
* Returns the property @ref LCS_LOCKREQUEST_LockUntil
*/
const GWEN_TIME *LCS_LockRequest_GetLockUntil(const LCS_LOCKREQUEST *el);
/**
* Set the property @ref LCS_LOCKREQUEST_LockUntil
*/
void LCS_LockRequest_SetLockUntil(LCS_LOCKREQUEST *el, const GWEN_TIME *d);


#ifdef __cplusplus
} /* __cplusplus */
#endif


#endif /* LOCKREQUEST_L_H */
