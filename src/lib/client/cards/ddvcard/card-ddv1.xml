<cards>
  <card name="ddv1" extends="ProcessorCard" type="processor" >
    <cardinfo>
      <name>HBCICard</name>
      <descr>
        HBCI card, new style
      </descr>
      <atrs>
       <!--
       <atr>3b ff 18 00 ff 81 31 3c 45 65 63 0d 02 31 02 50 00 10 *</atr>
       <atr>3b ff 18 00 ff 81 31 fe 45 65 63 11 06 40 02 50 00 10 *</atr>
       -->
       <atr>3b ff 18 00 ff 81 31 ?? 45 65 63 ?? ?? ?? 02 50 00 10 *</atr>
       <atr>3B FF 96 00 FF 81 31 FE 45 65 63 0D 09 71 07 64 00 0D 00 09 17 10 07 01 88</atr>
      </atrs>
    </cardinfo>
    
    <commands>

      <!-- Get keyVersion of a given key -->
      <command name="GetKeyInfo" >
        <send>
          <APDU lr="0" >
            <ELEM type="word">0xb0ee</ELEM>
            <ELEM type="byte">0x80</ELEM>
            <ELEM name="keyNumber" type="byte" />
          </APDU>
        </send>
        <responses>
          <response type="success">
            <ELEM name="keyVersion" type="byte" />
          </response>
        </responses>
      </command>
            
      <!-- Get 8 byte random number -->
      <command name="GetChallenge" >
        <send>
          <APDU lr="0" >
            <ELEM type="dword">0x00840000</ELEM>
          </APDU>
        </send>
        <responses>
          <response type="success">
            <ELEM name="challenge" type="bytes" minsize="8" maxsize="8" />
          </response>
        </responses>
      </command>

      <!-- Let card authenticate itself (used for encryption) -->
      <command name="CryptBlock" >
        <send>
          <APDU lr="0" >
            <ELEM type="dword">0x00880083</ELEM>
          </APDU>
          <DATA>
            <ELEM name="in" type="bytes" minsize="8" maxsize="8" />
          </DATA>
        </send>
        <results>
          <result sw1="0x69" sw2="0x82" type="error" >
            You must verify then PIN before using this command
          </result>
        </results>
        <responses>
          <response type="success">
            <ELEM name="out" type="bytes" minsize="8" maxsize="8" />
          </response>
        </responses>
      </command>

      <!-- Writes the right 12 bytes of a hash to the file EF_MAC -->
      <command name="WriteHashR" >
        <send>
          <APDU>
            <ELEM type="dword">0x00dc01dc</ELEM>
          </APDU>
          <DATA>
            <ELEM name="hashR" type="bytes" size="12" />
          </DATA>
        </send>
        <results>
          <result sw1="0x69" sw2="0x82" type="error" >
            You must verify then PIN before using this command
          </result>
        </results>
      </command>

      <!-- Writes the left 8 bytes of a hash to the file EF_MAC and retrieves
           the complete signed hash 
       -->
      <command name="SignHash" >
        <send>
          <APDU lr="0" >
            <ELEM type="dword">0x08b201dc</ELEM>
          </APDU>
          <DATA>
            <ELEM type="bytes">ba 0c b4 0a 87 08</ELEM>
            <ELEM name="hashL" type="bytes" minsize="8" maxsize="8" />
            <ELEM type="bytes">96 01 00</ELEM>
          </DATA>
        </send>
        <results>
          <result sw1="0x69" sw2="0x82" type="error" >
            You must verify then PIN before using this command
          </result>
        </results>
        <responses>
          <response type="success">
            <ELEM name="trash" type="bytes" size="16" />
            <ELEM name="signedHash" type="bytes" size="8" />
          </response>
        </responses>
      </command>

      
    </commands>
    
    <!-- generic command responses -->
    <results>
    </results>

  </card>
</cards>

