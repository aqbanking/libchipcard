# $RCSfile$
#                             -------------------
#    cvs         : $Id$
#    begin       : Mon Mar 01 2004
#    copyright   : (C) 2004 by Martin Preuss
#    email       : martin@libchipcard.de
#
# ***************************************************************************
# *          Please see toplevel file COPYING for license details           *
# ***************************************************************************/
#
#
# This file is used by the chipcard2 daemon.
# Please modify it to your needs and copy it to
#           $PREFIX/etc/chipcard2-server/chipcardd2.conf
#

# if this is "0" then the server won't start
enabled="1"

#
# this section describes some basic configuration variables.
# For any missing variable a reasonable default value is used
#

# ===========================================================================
# Autoconfiguration
#

#
# if "1" then autoconfiguration (via USB scanning) is disabled
# For autoconfiguration to work libchipcard2-server must be linked against
# libUSB. This is automatically done if libusb is available at compile time.
#
int disableAutoConf="0"

#
# minimum time in seconds which has to elapse between two USB scans
# USB scans only check for readers which do NOT use ttyUSBx devices (like
# the SCM Chipdrive Pinpad)
# A value of "0" makes the chipcard daemon only scan once (thus allowing
# only initial setup of already connected readers)
#
int usbScanInterval="2"

#
# minimum time in seconds which has to elapse between two USB-Serial scans
# USB-Serial scans check for readers which use ttyUSBx devices (like the
# Cyberjack).
# A value of "0" makes the chipcard daemon only scan once (thus allowing
# only initial setup of already connected readers)
#
int usbTtyScanInterval="2"



# ===========================================================================
# Timout Values
#

#
# timeout when starting a driver (in seconds)
#
int driverStartTimeout="10"

#
# timeout when starting a reader (including driverStartTimeout, in seconds)
#
int readerStartTimeout="15"

#
# time after which a driver is shut down when idle (in seconds)
#
int driverIdleTimeout="60"

#
# time after which a reader is shut down when idle (in seconds)
#
int readerIdleTimeout="30"

#
# maximum execution time for a command (in seconds)
#
readerCommandTimeout="60"



# ===========================================================================
# Server Sockets
#
# These sections describe server points. You may use multiple of those
# sections (in that case the daemon will listen on multiple sockets).
# Please choose one of the sections below by removing the ".inactive" suffix.


# ---------------------------------------------------------------------------
# local server, using Unix Domain Sockets which can only be
# connected from the very same machine. This is the preferred mode on 
# *nix systems (like Linux, *BSD etc, but not on Windows which does not
# support Unix Domain sockets).
#
server {
  typ="local"                 
  addr="/tmp/.chipcard2/chipcard2.sock"
} # server


# ---------------------------------------------------------------------------
# public server using TCP sockets (not encrypted, you should not
# use such a server with the chipcard daemon)
#
server.inactive {
  typ="public"
  addr="127.0.0.1"
  port="55555"
} # server


# ---------------------------------------------------------------------------
# private server using SSL secured sockets.
# New certificates are stored in the folder given by "newcertdir",
# received certificates are checked against those in "certdir"
# This is the recommended mode on systems which can't use "local" (e.g.
# Windows).
#
server.inactive {
  typ="private"
  addr="127.0.0.1"
  port="55555"
  certdir="/etc/chipcard2-server/certificates/valid"
  newcertdir="/var/lib/chipcard2-server/certificates/new"
  certfile="/etc/chipcard2-server/cert.pem"
} # server


# ---------------------------------------------------------------------------
# secure server using SSL secured sockets. In addition to mode
# "private" the certificates of the clients are checked against
# those stored in the "certdir". If the client certificate could
# not be found or is invalid the connection is aborted.
#
server.inactive {
  typ="secure"
  addr="127.0.0.1"
  port="55555"
  certdir="/etc/chipcard2-server/certificates/valid"
  newcertdir="/var/lib/chipcard2-server/certificates/new"
  certfile="/etc/chipcard2-server/cert.pem"
} # server



# ===========================================================================
# Drivers
#
# A driver section contains information about a driver and the readers
# supported by this driver.
#
# Please note that you only need driver sections for serial readers (i.e.
# readers which are connected to COM1-COMx). USB readers are autodetected.
#
# If you have an USB reader which is not recognized by Libchipcard you really
# should drop an email to martin@libchipcard.de containing the output of
# the command "lsusb" and the following extra information:
# - path and name of the driver
# - location from where you downloaded the driver
# - name of the card reader
# That would allow me to add the driver to the list and hence to support this
# card reader.
#
# However, if autoconfiguration is disabled (either by config file, see 
# above or because libUSB is not available) you need a driver section and 
# reader sections therin for every reader you want to use.
#


# ---------------------------------------------------------------------------
# driver section for a Kobil Kaan Professional
#
driver {
  # the general type of the driver
  # Currently available are these:
  # - ctapi (for CTAPI type drivers)
  # - ifd (for lowlevel drivers written for PC/SC)
  char driverType="ctapi"
  
  # This name should not be modified, since this is the name used to lookup
  # the format of card commands in the cards XML files
  char driverName="kobil_ctapi"
  
  # currently not used by the written drivers, but this is sent to the driver
  # as a command line argument. New drivers might use this one.
  char driverDataDir="/var/lib/chipcard2/drivers/ctapi"
  
  # path and name of the low-level driver file. This is the driver actually
  # provided by the manufacturer of the card reader
  char libraryFile="/usr/lib/kobil/libct.so"
  
  
  # This is a sub-section under a driver section.
  # One driver can generally run multiple readers (as long as the same
  # libraryFile is used, i.e. all readers are of the same type).
  # However, you should only use one reader per driver, only then they are
  # all handled independantly (each driver runs in its own process)
  #
  reader {
    # you should not alter this name, it is used to lookup the commands
    # special to this reader in the cards XML files
    char readerType="kobilpro"
    
    # reader name (send to the application and used for logging)
    char readerName="Kobil1"
    
    # normally each reader has one card slot. However, there are some readers
    # which have two (or might have even more). With chipcard2 the number
    # of slots is not limited anymore.
    int slots="1"
    
    # the meaning of the port value is completely defined by the driver:
    # - for CTAPI drivers this is the value given as CTN argument to CT_init
    # - for IFD drivers this value is given as CHANNEL in IFDHCreateChannel
    # In the case of a Kobil Kaan the value "1" stands for COM1.
    int port="1"
    
    # describes the capabilities of the reader (comma separated list),
    # currently available are:
    # - keypad (->reader has a built-in key pad)
    # - display (->reader has a built-in display)
    # Only add flags which are supported by your reader.
    char flags="keypad","display"
  }
}


